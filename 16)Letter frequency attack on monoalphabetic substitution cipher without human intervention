#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define ALPHABET_SIZE 26
#define MAX_CIPHERTEXT_SIZE 1000
#define MAX_PLAINTEXT_SIZE 1000

// Returns the index of the maximum value in an array
int max_index(int arr[], int size) {
    int max = 0;
    int index = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] > max) {
            max = arr[i];
            index = i;
        }
    }
    return index;
}

// Computes the letter frequency of a string
void letter_frequency(char *str, int freq[]) {
    int len = strlen(str);
    for (int i = 0; i < len; i++) {
        if (isalpha(str[i])) {
            freq[tolower(str[i]) - 'a']++;
        }
    }
}

// Decrypts the ciphertext using the given key
void decrypt(char *ciphertext, char *key, char *plaintext) {
    int len = strlen(ciphertext);
    for (int i = 0; i < len; i++) {
        if (isalpha(ciphertext[i])) {
            plaintext[i] = key[tolower(ciphertext[i]) - 'a'];
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[len] = '\0';
}

int main() {
    char ciphertext[MAX_CIPHERTEXT_SIZE];
    int freq[ALPHABET_SIZE] = {0};
    char key[ALPHABET_SIZE];
    char plaintext[MAX_PLAINTEXT_SIZE];
    int num_top_plaintexts = 10;
    
    // Read in the ciphertext
    printf("Enter the ciphertext: ");
    fgets(ciphertext, MAX_CIPHERTEXT_SIZE, stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';
    
    // Compute letter frequency of ciphertext
    letter_frequency(ciphertext, freq);
    
    // Determine most likely key
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        int max_freq_index = max_index(freq, ALPHABET_SIZE);
        char max_freq_char = max_freq_index + 'a';
        key[max_freq_index] = 'e';
        freq[max_freq_index] = 0;
    }
    
    // Decrypt ciphertext using the key
    decrypt(ciphertext, key, plaintext);
    
    // Print top plaintexts in order of likelihood
    printf("Possible plaintexts (in order of likelihood):\n");
    for (int i = 0; i < num_top_plaintexts; i++) {
        int freq[ALPHABET_SIZE] = {0};
        letter_frequency(plaintext, freq);
        int max_freq_index = max_index(freq, ALPHABET_SIZE);
        char max_freq_char = max_freq_index + 'a';
        printf("%s (assuming '%c' is 'e')\n", plaintext, max_freq_char);
        // Shift key by one character to produce next most likely plaintext
        char temp = key[0];
        for (int j = 0; j < ALPHABET_SIZE - 1; j++) {
            key[j] = key[j + 1];
        }
        key[ALPHABET_SIZE - 1] = temp;
        decrypt(ciphertext, key, plaintext);
    }
    
    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/des.h>

#define KEY_SIZE 24 // 3DES key size in bytes
#define BLOCK_SIZE 8 // Block size in bytes

void encrypt_3des_cbc(unsigned char *plaintext, int plaintext_len, unsigned char *key, unsigned char *iv, unsigned char *ciphertext) {
  DES_key_schedule ks1, ks2, ks3;
  DES_set_key((C_Block *)key, &ks1);
  DES_set_key((C_Block *)(key+8), &ks2);
  DES_set_key((C_Block *)(key+16), &ks3);

  unsigned char previous_block[BLOCK_SIZE];
  memcpy(previous_block, iv, BLOCK_SIZE);

  int num_blocks = plaintext_len / BLOCK_SIZE;
  for (int i = 0; i < num_blocks; i++) {
    unsigned char block[BLOCK_SIZE];
    memcpy(block, plaintext + i * BLOCK_SIZE, BLOCK_SIZE);

    // XOR with the previous block
    for (int j = 0; j < BLOCK_SIZE; j++) {
      block[j] ^= previous_block[j];
    }

    // encrypt with 3DES
    DES_ecb3_encrypt((C_Block *)block, (C_Block *)ciphertext + i * BLOCK_SIZE, &ks1, &ks2, &ks3, DES_ENCRYPT);

    // update previous block
    memcpy(previous_block, ciphertext + i * BLOCK_SIZE, BLOCK_SIZE);
  }
}

int main() {
  unsigned char key[KEY_SIZE] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67};
  unsigned char iv[BLOCK_SIZE] = {0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF};
  unsigned char plaintext[] = "This is a secret message.";
  int plaintext_len = strlen(plaintext);

  // add padding if necessary
  int padding_len = BLOCK_SIZE - (plaintext_len % BLOCK_SIZE);
  if (padding_len > 0) {
    plaintext_len += padding_len;
    unsigned char *padded_plaintext = malloc(plaintext_len);
    memcpy(padded_plaintext, plaintext, strlen(plaintext));
    for (int i = 0; i < padding_len; i++) {
      padded_plaintext[strlen(plaintext) + i] = padding_len;
    }
    plaintext = padded_plaintext;
  }

  unsigned char *ciphertext = malloc(plaintext_len);
  encrypt_3des_cbc(plaintext, plaintext_len, key, iv, ciphertext);

  printf("Plaintext: %s\n", plaintext);
  printf("Ciphertext: ");
  for (int i = 0; i < plaintext_len; i++) {
    printf("%02X ", ciphertext[i]);
  }
  printf("\n");

  free(plaintext);
  free(ciphertext);

  return 0;
}
